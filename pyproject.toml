[tool.poetry]
name = "simpulse"
version = "1.1.0"
description = "High-performance optimization tool for Lean 4 simp tactics"
authors = ["Bright Liu <bright.liu@example.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/Bright-L01/simpulse"
documentation = "https://simpulse.readthedocs.io"
keywords = ["lean4", "theorem-proving", "optimization", "simp", "tactics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Compilers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
]
packages = [{include = "simpulse", from = "src"}]

[tool.poetry.scripts]
simpulse = "simpulse.cli:main"

[tool.poetry.dependencies]
python = "^3.10"
click = "^8.1.7"
rich = "^13.7.0"
pydantic = "^2.5.0"
typing-extensions = "^4.8.0"
sentence-transformers = "^2.2.2"
torch = "^2.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
mypy = "^1.7.1"
ruff = "^0.1.6"
bandit = {extras = ["toml"], version = "^1.7.5"}
black = "^23.11.0"
isort = "^5.12.0"
pre-commit = "^3.5.0"
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"
mkdocs-material = "^9.4.14"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    "__pycache__",
    "docs",
    "build",
    "dist",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "lean4/",
    "validation_results/",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "S",    # bandit
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C90",  # mccabe complexity
    "RUF",  # ruff-specific rules
    "ANN",  # flake8-annotations
    "D",    # pydocstyle
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method
    "D200",   # One-line docstring should fit on one line
    "D212",   # Multi-line docstring summary should start at the first line
    "S603",   # subprocess call - needed for Lean
    "S607",   # Starting a process with a partial executable path
    "S311",   # Standard pseudo-random generators for non-crypto
    "E501",   # Line too long - handled by black
    "C901",   # Too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",   # Allow assert statements in tests
    "ANN001", # Missing type annotations for function arguments
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "D103",   # Missing docstring in public function
    "RUF001", # Allow ambiguous characters in test strings
]
"scripts/*" = ["D103", "ANN201"]  # Relax rules for scripts

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
no_implicit_optional = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | lean4
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=simpulse",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
branch = true
source = ["src/simpulse"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/experimental/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
targets = ["src"]
exclude_dirs = ["/tests", "/docs", "/scripts"]
skips = ["B101"]  # Allow assert statements

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*_test.py"]  # Allow assert in tests