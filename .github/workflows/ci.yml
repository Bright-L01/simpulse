name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev,test

    - name: Install Lean 4
      uses: leanprover/lean-action@v1

    - name: Run linting
      run: |
        poetry run ruff check src/ tests/
        poetry run black --check src/ tests/
        poetry run mypy src/

    - name: Run security scan
      run: poetry run bandit -r src/

    - name: Run tests
      run: |
        poetry run pytest tests/ \
          --cov=simpulse \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=85

    - name: Test CLI
      run: |
        poetry run simpulse --version
        poetry run simpulse --help

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  lean4-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Lean 4
      uses: leanprover/lean-action@v1

    - name: Build Lean package
      run: |
        cd lean4
        lake update
        lake build

    - name: Run Lean tests
      run: |
        cd lean4
        lake exe test

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lean4-test]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install

    - name: Install Lean 4
      uses: leanprover/lean-action@v1

    - name: Test end-to-end workflow
      run: |
        # Create test project
        mkdir test-project
        cat > test-project/test.lean << 'EOF'
        @[simp] theorem test_rule : true = true := rfl
        example : true = true := by simp
        EOF
        
        # Test analysis
        poetry run simpulse analyze test-project
        
        # Test optimization
        poetry run simpulse optimize test-project --dry-run