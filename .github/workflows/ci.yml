name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 12 * * 1'  # Weekly on Monday

permissions:
  contents: read
  security-events: write

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: quality-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev

    - name: Code formatting check
      run: |
        poetry run black --check --diff src/ tests/
        poetry run isort --check-only --diff src/ tests/

    - name: Linting
      run: poetry run ruff check src/ tests/

    - name: Type checking
      run: poetry run mypy src/

    - name: Security scan
      run: poetry run bandit -r src/ -f json -o bandit-report.json

  test:
    name: Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: test-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev,test

    - name: Install Lean 4 (Unix)
      if: runner.os != 'Windows'
      uses: leanprover/lean-action@v1

    - name: Install Lean 4 (Windows)
      if: runner.os == 'Windows'
      run: |
        curl -sSfL https://github.com/leanprover/elan/releases/latest/download/elan-x86_64-pc-windows-msvc.zip -o elan.zip
        Expand-Archive -Path elan.zip -DestinationPath elan
        ./elan/elan-init.exe -y
        echo "$env:USERPROFILE\.elan\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify installation
      run: |
        poetry run python --version
        lean --version

    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ \
          --verbose \
          --cov=simpulse \
          --cov-report=xml \
          --cov-report=term-missing

    - name: Run integration tests
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        poetry run pytest tests/integration/ \
          --verbose \
          --cov=simpulse \
          --cov-append \
          --cov-report=xml

    - name: Test CLI functionality
      run: |
        poetry run simpulse --version
        poetry run simpulse --help

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lean4-package:
    name: Lean 4 Package Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Lean 4
      uses: leanprover/lean-action@v1

    - name: Cache Lake packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.elan
          lean4/.lake
        key: lean4-${{ runner.os }}-${{ hashFiles('lean4/lakefile.lean') }}

    - name: Build Lean package
      run: |
        cd lean4
        lake update
        lake build

    - name: Run Lean tests
      run: |
        cd lean4
        if [ -f "lake" ]; then
          lake exe test
        else
          echo "No Lean tests configured"
        fi

    - name: Check Lean syntax
      run: |
        cd lean4
        find . -name "*.lean" -exec lean --check {} \;

  integration:
    name: End-to-End Integration
    runs-on: ubuntu-latest
    needs: [test, lean4-package]
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install

    - name: Install Lean 4
      uses: leanprover/lean-action@v1

    - name: Create test project
      run: |
        mkdir -p test-project
        cat > test-project/test.lean << 'EOF'
        @[simp] theorem test_rule : true = true := rfl
        @[simp] theorem another_rule : false = false := rfl
        
        example : true = true := by simp
        example : false = false := by simp
        EOF

    - name: Test analysis workflow
      run: |
        poetry run simpulse analyze test-project --json > analysis.json
        cat analysis.json
        # Verify JSON is valid
        python -c "import json; json.load(open('analysis.json'))"

    - name: Test optimization workflow
      run: |
        poetry run simpulse suggest test-project --limit 5
        poetry run simpulse optimize test-project --dry-run

  package:
    name: Package Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Build package
      run: poetry build

    - name: Check package
      run: |
        poetry run pip install twine
        poetry run twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        simpulse --version

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [quality, test, lean4-package, integration, package]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        echo "Quality: ${{ needs.quality.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Lean4: ${{ needs.lean4-package.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        echo "Package: ${{ needs.package.result }}"
        
        if [[ "${{ needs.quality.result }}" != "success" ]] || \
           [[ "${{ needs.test.result }}" != "success" ]] || \
           [[ "${{ needs.lean4-package.result }}" != "success" ]] || \
           [[ "${{ needs.package.result }}" != "success" ]]; then
          echo "❌ Some required checks failed"
          exit 1
        else
          echo "✅ All required checks passed"
        fi